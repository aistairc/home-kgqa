#!/usr/bin/env python
# coding: utf-8

import json
from openai import OpenAI
import os
import textwrap
import numpy as np
import argparse
import sys

# Load OpenAI API key from config file
try:
    with open('config.json', 'r') as f:
        config = json.load(f)
        os.environ["OPENAI_API_KEY"] = config["openai_api_key"]
except FileNotFoundError:
    print("Error: config.json file not found. Please create a config.json file with your OpenAI API key.")
    sys.exit(1)
except KeyError:
    print("Error: 'openai_api_key' not found in config.json file.")
    sys.exit(1)

client = OpenAI()


def load_pairs_from_json(json_path: str):
    """
    JSONの Category → Type → {original, paraphrase} 構造から
    (category, type, original, paraphrase) のリストを作る。
    """
    with open(json_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    pairs = []
    for category, types in data.items():
        for typ, leaf in types.items():
            original = leaf["original"]
            paraphrase = leaf["paraphrase"]
            pairs.append((category, typ, original, paraphrase))
    return pairs


def cosine_similarity(a: np.ndarray, b: np.ndarray) -> float:
    return float(np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b)))


def embed_texts(texts):
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    resp = client.embeddings.create(model="text-embedding-3-small", input=texts)
    return [d.embedding for d in resp.data]


def find_top_paraphrases(pairs, originals_emb, query_text:str, top_n=5):
    query_emb = embed_texts([query_text])[0]

    scores = [cosine_similarity(np.array(e), np.array(query_emb)) for e in originals_emb]

    top_idx = np.argsort(scores)[::-1][:top_n]

    results = []
    for i in top_idx:
        category, typ, original, paraphrase = pairs[i]
        results.append({
            "category": category,
            "type": typ,
            "original": original,
            "paraphrase": paraphrase,
            "score": round(scores[i], 6),
        })
    return results


def paraphrase(question_dataset):
    pairs = load_pairs_from_json("preprocess/gold_dataset.json")
    originals = [p[2] for p in pairs]
    originals_emb = embed_texts(originals)

    modified_question_list_en = []
    system_message_en = f"""
        You are an assistant helping a user to paraphrase the given text.
        The given question text is automatically generated by the program and may contain words and expressions that are not used in everyday conversation.
        Rewrite them in a more natural way following the rules below.
        Do not output anything other than the revised question text.

        ## Rule 1
        Correct grammatical errors.

        ## Rule 2
        If an object name + ID is used as is, paraphrase it to a more natural expression.
        [Example]
        Original expression: book443
        Paraphrased expression: book

        ## Rule 3
        Paraphrase time expressions in a more natural way.
        [Example]
        Original expression: after 2024-04-03T13:27:00 and before 2024-06-29T22:07:00
        Paraphrased expression: after April 3, 2024, 1:27 p.m. and before June 29, 2024, 10:07 p.m.

        ## Rule 4
        Paraphrase attribute expressions in a more natural way.
        [Example]
        Original expression: an object whose attribute is has_plug
        Paraphrased expression: an object that has a plug

        ## Rule 5
        Paraphrase state expressions in a more natural way.
        [Example]
        Original expression: an object whose state is CLEAN
        Paraphrased expression: a clean object

        ## Rule 6
        Paraphrase object names a more natural way.
        [Example]
        Original expression: clothespants
        Paraphrased expression: pants

        ## Rule 7
        Paraphrase type expressions in a more natural way.
        [Example]
        Original expression: an object whose type is Towel
        Paraphrased expression: towel

        ## Rule 8
        Paraphrase class expressions in a more natural way.
        [Example]
        Original expression: an object which is a subclass of Furniture
        Paraphrased expression: furniture

        ## Rule 9
        Paraphrase activity expressions in a more natural way.
        [Example]
        Original expression: What is the next activity after performing the wiping activity?
        Paraphrased expression: After performing the wiping activity, what did the agent do next?

        ## Rule 10
        Paraphrase expressions describing what is shown in the video frame in a more natural way.
        [Example]
        Original expression: What are the objects and their bounding boxes in the last video frame ...
        Paraphrased expression: What appears where in the last video frame of the scene in which ...

        ## Rule 11
        If the question is not about something that happened in the past, use the past tense in the question.

        ## Rule 12
        Don't change the original meaning.
    """

    # gold datasetを元にRAGでコンテキストを拡充（マルチターンfew-shot）

    for question in question_dataset:
        messages = []
        messages.append({"role": "system", "content": system_message_en})

        question_text_en = question["question_text_en"]

        top3 = find_top_paraphrases(pairs, originals_emb, query_text=question_text_en, top_n=5)

        for example in top3:
            category = example["category"]
            typ = example["type"]
            original = example["original"]
            paraphrase = example["paraphrase"]
            score = example["score"]

            messages.append({
                "role": "user",
                "content": original
            })
            messages.append({
                "role": "assistant",
                "content": paraphrase
            })

        messages.append({
            "role": "user",
            "content": question_text_en
        })
        
        completion = client.chat.completions.create(
            model="gpt-4o-mini-2024-07-18",
            messages=messages
        )
        paraphrased_question_en = completion.choices[0].message.content
        print(paraphrased_question_en)
        modified_question_list_en.append(paraphrased_question_en)
        question["paraphrased_question_text_en"] = paraphrased_question_en
    return question_dataset


def main(loop):
    """Main function to paraphrase questions for specified loop value."""
    question_categories = ["Object", "Action", "Space", "Time", "Activity", "Video", "Aggregation"]

    for category in question_categories:
        question_dataset = None
        dataset_file_name = f"generated_questions/question_dataset_{category}_{loop}"
        with open(dataset_file_name + ".jsonl", 'r') as f:
            print(f"Processing {dataset_file_name}.jsonl")
            question_dataset = json.load(f)
        
        question_dataset = paraphrase(question_dataset)
        with open(dataset_file_name +"_paraphrased.jsonl", 'w') as outfile:
            print(f"Saved {dataset_file_name}_paraphrased.jsonl")
            json.dump(question_dataset, outfile)
            
        for question in question_dataset:
            print(question["question_text_en"])
            print(question["paraphrased_question_text_en"])


if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Paraphrase questions for KGQA dataset')
    parser.add_argument('--loop', '-l', type=int, required=True,
                       help='Number of questions to process (must match the loop value used in generate_questions.py)')
    
    args = parser.parse_args()
    
    # Call main function with parsed arguments
    main(args.loop)